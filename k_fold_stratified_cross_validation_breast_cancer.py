# -*- coding: utf-8 -*-
"""k-fold_stratified_cross_validation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zGVtLDJ6n2ZPPh58Gv5eDoVz4NvjcjjF
"""

from keras.models import Sequential 
from keras.layers import Dense
from sklearn.model_selection import StratifiedKFold

import numpy

#for uploading .csv to google colab
import pandas as pd
from google.colab import files
import io
 
seed = 7  
numpy.random.seed(seed)

dataset = files.upload()

data_frame = pd.read_csv(io.BytesIO(dataset['breast_cancer_MB.csv']))

data = data_frame.values


data

data.shape

#split the dataset into features and labels

X = data[:,2:32]
Y = data[:,1]

#normalize the feature values z = (x - mean) / std. dev.
#for i in range(X.shape[1]):
 # X[:,i] = (X[:,i] - numpy.mean(X[:,i])) / numpy.std(X[:,i])
  
for i in range(Y.shape[0]):
  if Y[i] is 'M':
    Y[i] = 0
  elif Y[i] is 'B':
    Y[i] = 1

X = numpy.asarray(X, dtype = 'float32')    
Y = numpy.asarray(Y, dtype = 'float32')

X[0:1,:].shape

#create k-fold stratified cross validation test harness
kfold = StratifiedKFold(n_splits = 10, shuffle = True, random_state = seed)

def ANN():
  net = Sequential()
  net.add(Dense(15, input_dim = 30, init = 'uniform', activation = 'relu'))
  net.add(Dense(8, init = 'uniform', activation = 'relu'))
  net.add(Dense(1, init = 'uniform', activation = 'sigmoid'))
  #compile model
  net.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])
  return net

#array to store the accuracy of model on each fold of training and test data
cvscores = []

#create loop for making the k models 
model = ANN()

for train,test in kfold.split(X,Y): 
  #train the model
  model.fit(X[train], Y[train], epochs = 150, batch_size = 10, verbose = 0)
  #evaluate model
  score = model.evaluate(X[test], Y[test], verbose = 0)
  print('Accuracy: ', score[1]*100)
  cvscores.append(score[1]*100)

#print mean and std. dev of scores after running the k-fold cross validating training sets
print('Mean accuracy:',numpy.mean(cvscores), 'Std. dev: ',numpy.std(cvscores))

model.predict(X[[20]])

